import telebot
from logic import *
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import requests

bot = telebot.TeleBot(TOKEN)

def get_cat():
    url = 'https://api.thecatapi.com/v1/images/search'
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()[0]['url']

def gen_answer_markup(id):
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton('–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å', callback_data=f'answer_{id}'),
                   InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data='another'))
    return markup

def gen_questions_markup(answers):
    markup = InlineKeyboardMarkup(row_width=4)
    for i in range(len(QUESTIONS_INFO)):
        markup.row(InlineKeyboardButton(f'LEVEL {i+1}', callback_data=f' '))
        buttons = []
        for j in QUESTIONS_INFO[i]['list']:
            if j in answers:
                key = manager.get_key_by_id(j)
                buttons.append(InlineKeyboardButton(f"üü©{key}üü©", callback_data=f' '))
            else:
                buttons.append(InlineKeyboardButton(f'üü•{j}üü•', callback_data=f'{j}'))
        if len(buttons)>4:
            buttons = [buttons[i:i + 4] for i in range(0, len(buttons), 4)]
            for buttons_ in buttons:
                markup.row(*buttons_)
        else:
            markup.row(*buttons)
    return markup


def gen_teams_markup(teams):
    markup = InlineKeyboardMarkup(row_width=1)
    for team in teams:
        markup.add(InlineKeyboardButton(team[1], callback_data=f'team_{team[0]}'))
    return markup


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    user_id = call.message.chat.id

    if call.data.isdigit():
        question_id = call.data
        if manager.check_access(int(question_id), user_id):
            manager.update_question_id(user_id, question_id)
            send_question(bot, call.message, user_id)
        else:
            bot.send_message(user_id, '–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —É—Ä–æ–≤–Ω—é ( –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–ª–∏ —Å–æ–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ –∏–∑ –∫–ª—é—á–µ–π!) ')
    
    if  call.data == 'another':
        get_questions_handler(call.message)

    if call.data.startswith('answer'):
        question_id = int(call.data[7:])
        manager.update_question_id(user_id, question_id)
        id, question, answer = manager.get_question(user_id)
        bot.send_message(user_id, '–í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç:')
        bot.register_next_step_handler(call.message, next_step, id = id, answer=answer)

    if call.data.startswith('team'):
        team_id = int(call.data[5:])
        manager.insert_user(call.message.chat.id, team_id)
        register_step4(call.message)

def gen_rating_markup(rating):
    markup = InlineKeyboardMarkup(row_width=3)
    emogi = ['üëëüëëüëë', 'üëëüëë', 'üëë', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü']

    for idx, row in enumerate(rating, start=1):
        name, score = row
        markup.add(InlineKeyboardButton(emogi[idx-1], callback_data=' '),
                   InlineKeyboardButton(name, callback_data=' '),
                   InlineKeyboardButton(str(score), callback_data=' ')
                   )
    return markup

def send_question(bot, message, user_id):
    id, question, answer = manager.get_question(user_id)
    bot.send_message(user_id, question)
    bot.register_next_step_handler(message, next_step, id = id, answer=answer)


def next_step(message, id, answer):
    user_id = message.chat.id

    if message.text == answer:
        if manager.check_answer(user_id):
            bot.send_message(user_id, '–¢—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å!')
        else:
            bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –û—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π!")
            key = manager.get_key_by_id(manager.get_question(user_id)[0])
            bot.send_message(user_id, f"üéâüéâ –ü–æ–ª—É—á–∏ –∫–ª—é—á–∏–∫ {key} üéâüéâ") 

            if manager.add_points(user_id):
                bot.send_message(user_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ —É—Ä–æ–≤–Ω–µ!")
                bot.send_photo(message.chat.id, get_cat())
                get_questions_handler(message)
                bot.send_message(user_id, "–°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ –∏–∑ –∫–ª—é—á–∏–∫–æ–≤, —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Ä–æ–≤–Ω–µ! –ò –Ω–∞–ø–∏—à–∏ –∏—Ö –≤ –æ—Ç–≤–µ—Ç!")
                bot.register_next_step_handler(message, check_key)
            else:
                bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—à–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –∫–æ–º–∞–Ω–¥–µ /questions")
        pass
    else:
        bot.send_message(user_id, "–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", reply_markup=gen_answer_markup(id))

@bot.message_handler(commands=['key'])
def handler_check_key(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–æ–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:")
    bot.register_next_step_handler(message, check_key)

def check_key(message):
    user_id = message.chat.id
    key = manager.get_level_key(user_id)
    if message.text.upper() == key:
        bot.send_message(user_id, "–£—Ä–∞! –£ —Ç–µ–±—è –ø–æ–ª—É—á–∏–ª–æ—Å—å! ")
        manager.add_bonus(user_id)
        last_level = manager.update_level(user_id)
        if last_level:
            bot.send_message(user_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—à–µ–ª –∏–≥—Ä—É, —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–¥–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–æ–º–∞–Ω–¥–µ /rating")
        else:
            bot.send_message(user_id, "–ò–¥–µ–º –¥–∞–ª—å—à–µ! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç–µ–±–µ –æ—Ç–∫—Ä—ã–ª—Å—è!")
    else:
        bot.send_message(user_id, "–≠—Ç–æ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç :( –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ –∫–æ–º–∞–Ω–¥–µ /key")
        

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –≤–≤–µ–¥–∏—Ç–µ /register
–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–≤–µ–¥–∏: /rating
–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: /questions""")


@bot.message_handler(commands=['register'])
def register(message):
    markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
    markup.add(KeyboardButton('–î–∞'), KeyboardButton("–ù–µ—Ç"))
    bot.send_message(message.chat.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞?", reply_markup=markup)
    bot.register_next_step_handler(message,register_step1)


def register_step1(message):
    teams = manager.get_teams_name()
    if message.text == "–î–∞" and teams:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ', reply_markup=gen_teams_markup(teams))
    else: 
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ")
        bot.register_next_step_handler(message,register_step3)


def register_step3(message):
    team_id = manager.insert_team(message.text)
    manager.insert_user(message.chat.id, team_id)
    register_step4(message)


def register_step4(message):
    bot.send_message(message.chat.id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞—á–Ω–µ–º –∫–≤–∏–∑!")
    bot.send_message(message.chat.id, """–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –Ω–µ–±–æ–ª—å—à–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:

–°–µ–≥–æ–¥–Ω—è —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ VScode 'SQLite3 Editor'
–ë–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∏–∂–µ ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è""")
    with open('world_information.db', 'rb') as file:
        bot.send_document(message.chat.id, file)
    bot.send_message(message.chat.id, "–≠—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–∞—Ö. –í –Ω–µ–π –µ—Å—Ç—å —Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã: —Ç–∞–±–ª–∏—Ü–∞ —Å –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–º–∏, —Å—Ç—Ä–∞–Ω–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–∞—Ö. –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–≤—è–∑–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π. –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã - –∑–∞–¥–∞–≤–∞–π –∏—Ö –ø—Ä–µ–ø–æ–¥–∞–≤—Ç–∞–ª–µ—é üòâ")
    bot.send_message(message.chat.id, "–£–¥–∞—á–∏! –£ —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—èüî•")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /questions –∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã!")


@bot.message_handler(commands=['rating'])
def get_rating(message):
    rating = manager.get_rating() 
    bot.send_message(message.chat.id, '–†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ (–º–µ—Å—Ç–æ, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –æ—á–∫–∏):', reply_markup=gen_rating_markup(rating))


@bot.message_handler(commands=['questions'])
def get_questions_handler(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, '–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤', reply_markup=gen_questions_markup(manager.get_answers(chat_id))) 


if __name__ == '__main__':
    manager = DB_Manager(DATABASE)
    bot.polling()
    
